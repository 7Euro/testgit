<?xml version="1.0" encoding="UTF-8"?>  
<beans xmlns="http://www.springframework.org/schema/beans"  
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  
    xmlns:aop="http://www.springframework.org/schema/aop"  
    xmlns:tx="http://www.springframework.org/schema/tx"  
    xmlns:context="http://www.springframework.org/schema/context"  
    xsi:schemaLocation="http://www.springframework.org/schema/beans  
        http://www.springframework.org/schema/beans/spring-beans-2.5.xsd  
        http://www.springframework.org/schema/context  
        http://www.springframework.org/schema/context/spring-context-2.5.xsd  
        http://www.springframework.org/schema/aop  
        http://www.springframework.org/schema/aop/spring-aop-2.5.xsd  
        http://www.springframework.org/schema/tx  
        http://www.springframework.org/schema/tx/spring-tx-2.5.xsd ">  
	<!-- 数据库配置 -->
	<!-- 引入外部文件 -->
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">  
        <property name="locations">  
           <list>  
                 <value>classpath:jdbc.properties</value>  
           </list>  
        </property>  
    </bean>
	<!-- 数据库连接 -->
	    <bean id="dataSource"  
        class="org.springframework.jdbc.datasource.DriverManagerDataSource">  
        <property name="driverClassName" value="${jdbc.driverClassName}"></property>  
        <property name="url" value="${jdbc.url}"></property>  
        <property name="username" value="${jdbc.username}"></property>  
        <property name="password" value="${jdbc.password}"></property>  
    </bean> 
    <!-- sessionFactory的创建 -->    
	<bean id="sessionFactory" class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">  
        <property name="dataSource"><ref bean="dataSource" /></property>  
        <property name="hibernateProperties">  
            <props>  
            	<!-- 数据库方言 -->
                <prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
                <!-- <prop key="hibernate.hbm2ddl.auto">update</prop> -->
                <!-- 输出底层sql语句 -->
				<prop key="hibernate.show_sql">true</prop>
				<!-- 输出底层sql语句格式 -->
				<prop key="hibernate.format_sql">true</prop>
				<prop key="hibernate.hbm2ddl.auto">update</prop>
            </props>  
        </property>
        <!--指明使用标注的实体类-->
	   <!-- <property name="annotatedClasses">
	     <list>
	       <value>com.beichende.assess.trade.bean.CustomerInfo</value>
	     </list>
	   </property> -->
	   <!--当然也可以不使用上面这种指定的方式，而使用包扫描的方式做为替换，推荐这种-->
	    <property name="packagesToScan">
	       <list>
	            <value>ssh.test.bean</value>
	        </list>
	    </property>
    </bean> 
	<!-- 事务管理器 -->
	<bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"></property> 
	</bean>
	<!-- 开启事务 并对指定方法进行打开关闭事务 -->
	<tx:advice id="txAdvance" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="*" propagation="REQUIRED" rollback-for="java.lang.Exception" />
		</tx:attributes>
	</tx:advice>
	 <!-- 该 BeanPostProcessor 将自动对标注 @Autowired 的 Bean 进行注入 -->  
    <bean class="org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor"/>  
    <!-- 使用annotation 自动注册bean,并检查@Required,@Autowired的属性已被注入 -->  
    <context:component-scan base-package="ssh.test"/>
</beans>